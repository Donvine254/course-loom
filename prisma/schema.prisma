// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Course {
  id                  String       @id @default(cuid())
  short_description   String
  long_description    String
  slug                String       @unique
  title               String
  price               Float
  banner              String
  prerequisites       String
  learning_objectives String
  attachments         Attachment[]
  purchases           Purchase[]
  status              CourseStatus @default(DRAFT)
  isPublished         Boolean      @default(false)
  instructor          Instructor   @relation(fields: [instructorId], references: [id])
  categoryId          String
  category            Category     @relation(fields: [categoryId], references: [id])
  instructorId        String
  chapters            Chapter[]
  reviews             Review[]
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt

  @@index([categoryId, slug])
}

model Instructor {
  id        String   @id @default(cuid())
  name      String
  email     String
  courses   Course[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id      String   @id @default(uuid())
  name    String   @unique
  courses Course[]
}

model Chapter {
  id        String   @id @default(cuid())
  title     String
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Attachment {
  id   String @id @default(uuid())
  name String
  url  String @db.Text

  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model Purchase {
  id        String   @id @default(uuid())
  userId    String
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@unique([userId, courseId])
  @@index([courseId])
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  comment   String
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  String
  studentId String
  student   Student  @relation(fields: [studentId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Student {
  id        String   @id @default(cuid())
  name      String
  email     String
  phone     Int?
  reviews   Review[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model StripeCustomer {
  id               String   @id @default(uuid())
  userId           String   @unique
  stripeCustomerId String   @unique
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}
